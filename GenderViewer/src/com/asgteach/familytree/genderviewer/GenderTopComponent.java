/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.asgteach.familytree.genderviewer;

import com.asgteach.familytreefx.model.FamilyTreeManagerSwing;
import com.asgteach.familytreefx.model.PersonSwing;
import java.awt.BorderLayout;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.LifecycleManager;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.InstanceContent;



/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.asgteach.familytree.genderviewer//Gender//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "GenderTopComponent",
        //iconBase = "com/asgteach/familytree/genderviewer/personIcon32.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.asgteach.familytree.personviewer.GenderTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_GenderAction",
        preferredID = "GenderTopComponent"
)
@Messages({
    "CTL_GenderAction=Gender",
    "CTL_GenderTopComponent=Gender Window",
    "HINT_GenderTopComponent=This is a Gender window"
})
public final class GenderTopComponent extends TopComponent implements ExplorerManager.Provider {

    private final ExplorerManager em = new ExplorerManager();
    private FamilyTreeManagerSwing ftm;
    private final DefaultMutableTreeNode top = new DefaultMutableTreeNode("People");
    private final DefaultTreeModel treeModel = new DefaultTreeModel(top);
   
    private final InstanceContent instanceContent = new InstanceContent();


    public GenderTopComponent() {
        initComponents();
        setName(Bundle.CTL_GenderTopComponent());
        setToolTipText(Bundle.HINT_GenderTopComponent());
         //associateLookup(new AbstractLookup(instanceContent));

        BeanTreeView view = new BeanTreeView();
        add(view, BorderLayout.CENTER);
        associateLookup(ExplorerUtils.createLookup(em, this.getActionMap()));
        
        em.setRootContext(new RootNode());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        personTree = new JTree(treeModel);

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(personTree);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree personTree;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
      
         ftm = Lookup.getDefault().lookup(FamilyTreeManagerSwing.class);
        if (ftm == null) {
            
            LifecycleManager.getDefault().exit();
        }
        ExplorerUtils.activateActions(em, true);
        buildData();
        createNodes();

    }
     private void createNodes() {
        ftm.getAllPeople().stream().forEach((p) -> {
            top.add(new DefaultMutableTreeNode(p));
        });
        // Expand the tree
        if (top.getChildCount() != 0) {
            TreeNode[] nodes = treeModel.getPathToRoot(top.getLastChild());
            TreePath path = new TreePath(nodes);
            personTree.scrollPathToVisible(path);
        }
    }
      private void buildData() {
        ftm.addPerson(new PersonSwing("Malaba", "Mashauri", PersonSwing.Gender.MALE));
        ftm.addPerson(new PersonSwing("Liz", "Mashauri", PersonSwing.Gender.FEMALE));
        ftm.addPerson(new PersonSwing("Allan", "Garde", PersonSwing.Gender.MALE));
        ftm.addPerson(new PersonSwing("Sasha", "Simpson", PersonSwing.Gender.FEMALE));
        ftm.addPerson(new PersonSwing("Maggie", "Simpson", PersonSwing.Gender.FEMALE));
        //logger.log(Level.FINE, ftm.getAllPeople().toString());
    }


    @Override
    public void componentClosed() {
       ExplorerUtils.activateActions(em, false);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
}
